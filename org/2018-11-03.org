* Emacs
** Symbol
   [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html][reference]]

   A symbol is an object with a name. The symbol name serves as the
   printed representation of the symbol. use ~symbol-name~ to convert a
   symbol name into string.

   A symbol name starts with ~:~ is keyboard symbol, it acts as a
   constant.

   As an exception to the rule that a symbol's name serves as its
   printed representation, ~##~ is the printed representation for an
   symbol whose name is an empty string. Furthermore, ~#:foo~ is the
   printed representation for an uninterned symbol whose name is
   foo. (Normally, the Lisp reader interns all symbols; see Creating Symbols.)
** Append to buffer

   #+BEGIN_SRC emacs-lisp
     (defun my-append-to-buffer (buffer beginning end)
       "Append string to target BUFFER."
       (interactive
        (list
         (read-buffer "Target buffer: " (other-buffer (current-buffer) t))
         (region-beginning)
         (region-end)))
       (let
           ((old-buf (current-buffer)))
         (save-excursion
           (switch-to-buffer buffer)
           (insert-buffer-substring old-buf beginning end)
           (switch-to-buffer old-buf))))
   #+END_SRC

   Some points are forgetton so that it takes some time to debug

   - Forget to save buffer

     Because it is used to save region into other buffer, so at first
     I forgot to save current buffer, so that after ~swich-to-buffer~, I
     got an error message of ~Argument out of range~. That where the
     funtion body is inside a ~let~.

   - Wrong ~let~ syntax

     When using ~let~, I didn't put parenthesis for the variable list,
     so that got an error of ~Wrong type argument: stringp, nil~, and
     this error message shows on the ~save-excursion~, so that it takes
     a while to find out actual bug happens in the variable list.

   - Wrong ~save-excursion~ syntax

     When executing ~save-excursion~, the function body doesn't need to
     have another parenthesis, it causes some error message.

   - Wrong syntax of ~read-buffer~

     From document, for ~PROMPT~ needs to have ": " at the end of string.

* React

  [[https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0][reference]]

** Presentational Component

   Since it's presentational, then it is related to UI (DOM). For
   reusability, this kind of component usually be stateless, data is
   provided by props.

** Container

   Focus on how things work, so it takes care of data source, usually
   with some actions to get data. It usually has some kind of
   state and generated by high-order component.

* Process for browser visit google.component

  [[https://dev.to/antonfrattaroli/what-happens-when-you-type-googlecom-into-a-browser-and-press-enter-39g8?utm_source=wanqu.co&utm_campaign=Wanqu+Daily&utm_medium=ios][Original Post]]

** Parse input

   Try to guess user input for search terms or URL (e.g., .com or
   .org). If it's a URL, append prefix if not exist(htpp://). If no
   port is specified, default 80 for GET method.

** Request

   Protocol involves OSI 7 layers:

   - Application (the logic initiating requests)
   - Presentation (HTTP)
   - Session (TLS)
   - Transport (TCP)
   - Network (packet routing, IP)
   - Data Link (frames, packet container)
   - Physical (bitstreams)

** DNS Lookup

   Get actual IP (ipv4/6) by asking domain name servers.

** Get to Google

   Host name canonicalization by 301, which is permanent URL
   redirection. Then use 307 to make sure HTTPS used, 307 means
   temporary redirect, means target resource resides temporarily under
   a different URI and the user agent MUST NOT change request method
   if it performs an automatic redirection to that URI.

   if not. For HTTPS, it needs TLS hand shake communication between
   server and client to decide TSL version. After protocol version is
   decided, encrypt afterwards content.

   Then download fonts, logos, user avatar image, etc. For each
   response body, unzip it and run javascript.

   For the initial page, put a html nonce attribute in header for
   security concern.

** Canonical Domain Name

   [[https://stackoverflow.com/questions/12669076/host-name-vs-canonical-host-name][reference]]

   "Canonical" means "unique distinguished exemplar". A computer may
   have many aliases but should only have one canonical name.

   ~getCanonicalHostName()~ will attempt to resolve the FQDN. Therefore,
   you would get ~foo.mycompany.com~ whereas ~getHostName()~ might just
   return ~foo~.

   ~getCanonicalHostName()~ will always do a reverse DNS
   lookup, whereas ~getHostName()~ would return the stored hostname if
   you supplied one in the InetAddress constructor.

** Nonce

   [[https://stackoverflow.com/questions/42922784/what-s-the-purpose-of-the-html-nonce-attribute-for-script-and-style-elements][reference]]

   CSP - Content Security Policy

   The nonce attribute enables you to “whitelist” certain inline
   script and style elements, while avoiding use of the CSP
   unsafe-inline directive (which would allow all inline
   script/style), so that you still retain the key CSP feature of
   disallowing inline script/style in general.
